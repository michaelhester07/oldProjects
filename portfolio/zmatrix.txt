Get Domain Setup

Get timesheet fixed


-Start debugging CPCT



Build Flashlights
Run flashlights

build conversion algorithim

typedef double row[4];
typedef row dmatrix[4];
 int mx;
 int my;
 int pdmx;
 int pdmy;

 int mousedown;
struct zvertex
{
       double x; double y; double z; 
       zvertex & operator= (const zvertex & rhs);
       void upload(double * d) {x = d[0]; y = d[1]; z = d[2];}
       void download(double * d) {d[0] = x; d[1] = y; d[2] = z;}
       };
zvertex & zvertex::operator= (const zvertex & rhs)
{
       x = rhs.x;
       y = rhs.y;
       z = rhs.z;
       return *this;
}
     

class zmatrix
{
      dmatrix dat;
      dmatrix ret; //used to return data
      public:
             void identity(); //sets the zmatrix to the identity
             zmatrix & operator = (const zmatrix & rhs);
             void postmultiply(const zmatrix & rhs);
             //this zmatrix is postmultiplied by the zmatrix rhs
             void rotate(double x, double y, double z); //install rotation zmatrix
             void translate(double x, double y, double z); //install translation
             void scale(double x, double y, double z);
             zvertex applytransform(const zvertex & rhs);
};
zmatrix & zmatrix::operator = (const zmatrix & rhs)
{
       for(int i = 0; i < 4; i++)
               for(int j = 0; j < 4; j++)
                       dat[i][j] = rhs.dat[i][j];
       return * this;
}
void zmatrix::postmultiply(const zmatrix & rhs)
{

     dmatrix hold;
     for(int i = 0; i < 4; i++)
             for(int j = 0; j < 4; j++)
                     hold[i][j] = dat[i][j];
             
     //do the multiplication
     float sumspot;
     for(int i = 0; i < 4; i++)
             for(int j = 0; j < 4; j++)
             {       sumspot = 0;
                    for(int k = 0; k < 4; k++)
                            sumspot += hold[i][k] * rhs.dat[k][j];
                    dat[i][j] = sumspot;
             }
     
}
zvertex zmatrix::applytransform(const zvertex & rhs)
{
       zvertex zret;
       zret.x= dat[0][0]*rhs.x + dat[0][1]*rhs.y + dat [0][2] * rhs.z + dat[0][3];
       zret.y= dat[1][0]*rhs.x + dat[1][1]*rhs.y + dat [1][2] * rhs.z + dat[1][3];
       zret.z= dat[2][0]*rhs.x + dat[2][1]*rhs.y + dat [2][2] * rhs.z + dat[2][3];
       return zret;
}
void zmatrix::identity()
{
      for(int i = 0; i < 4; i++)
               for(int j = 0; j < 4; j++)
                       dat[i][j] = (i== j);
}
void zmatrix::rotate(double x, double y, double z)
{
      //install rotation zmatrix
      //all of these operations are post multiplied into the current zmatrix
      zmatrix ez; ez.identity();
     
      //rotations here are in radians
      float cy = cos(z);
      float sy = sin(z);
      float cz = cos(y);
      float sz = sin(y);
      float cx = cos(x);
      float sx = sin(x);
      ez.dat[0][0] = cz*cy;
	ez.dat[1][0] = cz*sy;
	ez.dat[2][0] = -sz;
	ez.dat[0][1] = sx*sz*cy+cx*-sy;
	ez.dat[1][1] = sx*sz*sy+cx*cy;
	ez.dat[2][1] = sx*cz;
	ez.dat[0][2] = (cx*sz*cy+-sx*-sy);
	ez.dat[1][2] = (cx*sz*sy+-sx*cy);
	ez.dat[2][2] = cx*cz;
	ez.dat[0][3] = 0.0;
	ez.dat[1][3] = 0.0;
	ez.dat[2][3] = 0.0;
	postmultiply(ez);
}     
void zmatrix::translate(double x, double y, double z) 
{
     zmatrix ez; ez.identity();
     ez.dat[0][3] = x;
     ez.dat[1][3] = y;
     ez.dat[2][3] = z;
     postmultiply(ez);
}
     
     //install translation
void zmatrix::scale(double x, double y, double z)
{
     zmatrix ez; ez.identity();
     ez.dat[0][0] = x;
     ez.dat[1][1] = y;
     ez.dat[2][2] = z;
     postmultiply(ez);
}
